const synthetics = require('Synthetics');
const syntheticsConfiguration = synthetics.getConfiguration();

const repository = 'awsfundamentals-hq/cloudwatch-observability-access-manager';

// ----------------------------------------------------------------------------
// BASIC SYNTHETICS CONFIGURATION ---------------------------------------------
const stepConfig = {
  includeRequestHeaders: true,
  includeResponseHeaders: true,
  includeRequestBody: true,
  includeResponseBody: true,
  continueOnHttpStepFailure: false,
};
syntheticsConfiguration.setConfig({
  restrictedHeaders: [],
  restrictedUrlParameters: [],
});

// ----------------------------------------------------------------------------
// DEFINING OUR REQUEST OPTIONS -----------------------------------------------
const url = process.env.BACKEND_URL;
const hostname = url.replace(/^https?:\/\/|\/.*$/g, '');
const port = 443;
const protocol = 'https:';
const path = `/prod/repositories`;
const requestOptions = { hostname, path, port, protocol };

// ----------------------------------------------------------------------------
// HELPER FUNCTIONS -----------------------------------------------------------
const validateSuccessful = (res) => {
  if (res.statusCode < 200 || res.statusCode > 299) {
    const errorMessage = `REST call failed: ${res.statusCode} ${res.statusMessage}`;
    log.error(errorMessage);
    throw new Error(errorMessage);
  }
};

// ----------------------------------------------------------------------------
// TEST JOURNEY ---------------------------------------------------------------

const apiCanary = async function () {
  await synthetics.executeHttpStep(
    'GetRepositories',
    { ...requestOptions, method: 'GET' },
    validateSuccessful,
    stepConfig
  );

  await synthetics.executeHttpStep(
    'AddRepository',
    {
      ...requestOptions,
      method: 'POST',
      body: JSON.stringify({
        full_name: repository,
      }),
    },
    validateSuccessful,
    stepConfig
  );

  await synthetics.executeHttpStep(
    'VerifyRepositoryAdded',
    { ...requestOptions, method: 'GET' },
    async (res) => {
      validateSuccessful(res);
      const body = await new Promise((resolve) => {
        let data = '';
        res.on('data', (chunk) => (data += chunk));
        res.on('end', () => resolve(data));
      });
      const repositories = JSON.parse(body);
      if (!repositories.some((repo) => repo.full_name === repository)) {
        throw new Error('Repository not found in the list');
      }
    },
    stepConfig
  );

  await synthetics.executeHttpStep(
    'DeleteRepository',
    {
      ...requestOptions,
      method: 'DELETE',
      path: `/prod/repositories/${encodeURIComponent(repository)}`,
    },
    validateSuccessful,
    stepConfig
  );
};

exports.handler = async () => {
  return await apiCanary();
};