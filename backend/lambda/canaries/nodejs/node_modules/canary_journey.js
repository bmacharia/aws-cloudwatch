const synthetics = require('Synthetics');
const log = require('SyntheticsLogger');
const syntheticsConfiguration = synthetics.getConfiguration();
const syntheticsLogHelper = require('SyntheticsLogHelper');

/**
 * Example repositories we can use in our test.
 */
const repositories = [
  'rails/rails',
  'golang/go',
  'microsoft/TypeScript',
  'flutter/flutter',
  'electron/electron',
  'microsoft/terminal',
  'hashicorp/terraform',
  'bitcoin/bitcoin',
  'ethereum/go-ethereum',
  'apache/kafka',
  'apache/spark',
  'apache/incubator-superset',
  'dotnet/core',
  'dotnet/aspnetcore',
  'microsoft/MS-DOS',
  'Homebrew/brew',
  'laravel/laravel',
  'symfony/symfony',
  'spring-projects/spring-boot',
  'spring-projects/spring-framework',
  'mozilla/firefox',
  'atom/atom',
  'adobe/brackets',
  'microsoft/PowerToys',
  'zeit/hyper',
  'vercel/next.js',
  'gatsbyjs/gatsby',
  'jekyll/jekyll',
  'hakimel/reveal.js',
  'impress/impress.js',
  'grafana/grafana',
  'prometheus/prometheus',
  'elastic/elasticsearch',
  'elastic/kibana',
  'elastic/logstash',
  'elastic/beats',
];

// ----------------------------------------------------------------------------
// BASIC SYNTHETICS CONFIGURATION ---------------------------------------------
syntheticsConfiguration.disableStepScreenshots();
syntheticsConfiguration.setConfig({
  continueOnStepFailure: false, // Set to true if you want the script to continue even after a step fails.
  includeRequestHeaders: true, // Enable if headers should be displayed in HAR
  includeResponseHeaders: true, // Enable if headers should be displayed in HAR
  restrictedHeaders: [], // Value of these headers will be redacted from logs and reports
  restrictedUrlParameters: [], // Values of these url parameters will be redacted from logs and reports
});

let repositoryToAdd = repositories[Math.floor(Math.random() * repositories.length)];
console.info(`Repository to add: ${repositoryToAdd}`);

// ----------------------------------------------------------------------------
// STEPS ----------------------------------------------------------------------

const loadLandingPage = async function (page, url) {
  let domcontentloaded = false;

  const stepName = `LoadLandingPage`;
  await synthetics.executeStep(stepName, async function () {
    const sanitizedUrl = syntheticsLogHelper.getSanitizedUrl(url);

    const response = await page.goto(url, {
      waitUntil: ['domcontentloaded'],
      timeout: 30000,
    });
    if (response) {
      domcontentloaded = true;
      const status = response.status();
      const statusText = response.statusText();

      logResponseString = `Response from url: ${sanitizedUrl}  Status: ${status}  Status Text: ${statusText}`;

      if (response.status() < 200 || response.status() > 299) {
        throw new Error(`Failed to load url: ${sanitizedUrl} ${response.status()} ${response.statusText()}`);
      }
    } else {
      const error = `No response returned for url: ${sanitizedUrl}`;
      log.error(error);
      throw new Error(error);
    }
  });

  if (domcontentloaded) {
    await new Promise((r) => setTimeout(r, 5000));
    await synthetics.takeScreenshot(stepName, 'loaded');
  }
  log.info(`Loaded landing page`);
};

/**
 * Add a random repository from our list of repositories.
 */
const addRepository = async function (page) {
  const stepName = `AddRepository`;
  await synthetics.executeStep(stepName, async function () {
    await page.type("[data-testid='url-input']", repositoryToAdd);
    await page.click("[data-testid='add-button']");
    await new Promise((r) => setTimeout(r, 5000));
    await synthetics.takeScreenshot(stepName, 'call-finished');
  });
  log.info(`Repository added`);
};

const searchRepository = async function (page) {
  const stepName = `SearchRepository`;
  await synthetics.executeStep(stepName, async function () {
    await page.type("[data-testid='search-input']", repositoryToAdd);
    await new Promise((r) => setTimeout(r, 5000));
    await synthetics.takeScreenshot(stepName, 'call-finished');
  });
  log.info(`Repository searched`);
};

const clearSearch = async function (page) {
  const stepName = 'ClearSearch';
  await synthetics.executeStep(stepName, async function () {
    // Clear the input field before typing
    await page.click("[data-testid='search-input']", { clickCount: 3 });
    await page.keyboard.press('Backspace');
    await new Promise((r) => setTimeout(r, 5000));
    await synthetics.takeScreenshot(stepName, 'call-finished');
  });
  log.info(`Repository searched`);
};

/**
 * Remove the first repository in the list.
 * All buttons do have the data-testid "remove-button-<index>".
 *
 * If the search was used, there should be just one repository in the list.
 */
const removeFirstRepositoryInList = async function (page) {
  const stepName = 'RemoveFirstRepoInList';
  await synthetics.executeStep(stepName, async function () {
    const removeButtons = await page.$$("[data-testid^='remove-button-']");
    if (removeButtons.length === 0) {
      console.info('No repositories to remove');
      return;
    } else if (removeButtons.length > 1) {
      console.info('More than one repository to remove, removing the first one');
    }
    console.info(`Removing repository`);
    await removeButtons[0].click();
    await new Promise((r) => setTimeout(r, 5000));
    await synthetics.takeScreenshot(stepName, 'call-finished');
  });
  log.info(`Repository removed`);
};

// ----------------------------------------------------------------------------
// BASIC SETUP ----------------------------------------------------------------

const loadBlueprint = async function () {
  const page = await synthetics.getPage();
  return page;
};

const resetPage = async function (page) {
  try {
    await page.goto('about:blank', {
      waitUntil: ['load', 'networkidle0'],
      timeout: 30000,
    });
  } catch (e) {
    synthetics.addExecutionError('Unable to open a blank page. ', e);
  }
};

// ----------------------------------------------------------------------------
// TEST JOURNEY ---------------------------------------------------------------

const journey = async () => {
  log.info(`Executing journey`);

  // Load the blueprint
  const page = await loadBlueprint();

  // Get the page URL from the environment variables
  const url = process.env.FRONTEND_URL;

  // Load the landing page
  await loadLandingPage(page, url);

  // Search the repository that we want to add
  await searchRepository(page);

  // Remove it if it's already in our list
  await removeFirstRepositoryInList(page);

  // Clear the search
  await clearSearch(page);

  // Add our new repository
  await addRepository(page);

  // Search it again
  await searchRepository(page);

  // Remove it once again
  await removeFirstRepositoryInList(page);

  // Clear the search
  await clearSearch(page);

  // Finish the test by opening a blank page
  await resetPage(page);

  log.info('Journey successful');
};

exports.handler = async () => journey();
