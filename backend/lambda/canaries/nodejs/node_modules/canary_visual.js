const synthetics = require('Synthetics');
const log = require('SyntheticsLogger');
const syntheticsConfiguration = synthetics.getConfiguration();
const syntheticsLogHelper = require('SyntheticsLogHelper');

// ----------------------------------------------------------------------------
// BASIC SYNTHETICS CONFIGURATION ---------------------------------------------
syntheticsConfiguration.disableStepScreenshots();
syntheticsConfiguration.setConfig({
  continueOnStepFailure: false, // Set to true if you want the script to continue even after a step fails.
  includeRequestHeaders: true, // Enable if headers should be displayed in HAR
  includeResponseHeaders: true, // Enable if headers should be displayed in HAR
  restrictedHeaders: [], // Value of these headers will be redacted from logs and reports
  restrictedUrlParameters: [], // Values of these url parameters will be redacted from logs and reports
});

syntheticsConfiguration.withVisualCompareWithBaseRun(true); // enabling the visual comparison mode
syntheticsConfiguration.withVisualVarianceThresholdPercentage(0.5); // setting the variance threshold to 0.5%

const testingRepository = 'facebook/react';

// ----------------------------------------------------------------------------
// STEPS ----------------------------------------------------------------------

const loadLandingPage = async function (page, url) {
  let domcontentloaded = false;

  const stepName = `LoadingLandingPage`;
  await synthetics.executeStep(stepName, async function () {
    const sanitizedUrl = syntheticsLogHelper.getSanitizedUrl(url);

    const response = await page.goto(url, {
      waitUntil: ['domcontentloaded'],
      timeout: 30000,
    });
    if (response) {
      domcontentloaded = true;
      const status = response.status();
      const statusText = response.statusText();

      logResponseString = `Response from url: ${sanitizedUrl}  Status: ${status}  Status Text: ${statusText}`;

      if (response.status() < 200 || response.status() > 299) {
        throw new Error(`Failed to load url: ${sanitizedUrl} ${response.status()} ${response.statusText()}`);
      }
    } else {
      const error = `No response returned for url: ${sanitizedUrl}`;
      log.error(error);
      throw new Error(error);
    }
  });

  if (domcontentloaded) {
    await new Promise((r) => setTimeout(r, 5000));
  }
  log.info(`Loaded landing page`);
};

const addRepository = async function (page) {
  const stepName = `AddRepository`;
  await synthetics.executeStep(stepName, async function () {
    await page.type("[data-testid='url-input']", testingRepository);
    await page.click("[data-testid='add-button']");
    await new Promise((r) => setTimeout(r, 2500));
  });
  log.info(`Repository added`);
};

const goToRepositoryDetailPage = async function (page) {
  const stepName = `GoToRepositoryDetailPage`;
  await synthetics.executeStep(stepName, async function () {
    // get all labels
    const labelSelector = "[data-testid^='card-label']";
    const labels = await page.$$(labelSelector);
    // check all labels: find the repository and click on it
    for await (const label of labels) {
      console.info(`Checking label: ${label}`);
      const text = await page.evaluate(el => el.textContent, label);
      if (text.includes(testingRepository)) {
        console.info(`Found repository: ${text}`);
        await label.click();
        break;
      }
    }
    await new Promise((r) => setTimeout(r, 2500));
    await synthetics.takeScreenshot(stepName, 'call-finished');
  });
};

// ----------------------------------------------------------------------------
// BASIC SETUP ----------------------------------------------------------------

const loadBlueprint = async function () {
  const page = await synthetics.getPage();
  return page;
};

const resetPage = async function (page) {
  try {
    await page.goto('about:blank', {
      waitUntil: ['load', 'networkidle0'],
      timeout: 30000,
    });
  } catch (e) {
    synthetics.addExecutionError('Unable to open a blank page. ', e);
  }
};

// ----------------------------------------------------------------------------
// TEST JOURNEY ---------------------------------------------------------------

const journey = async () => {
  log.info(`Executing journey`);

  const page = await loadBlueprint();

  const url = process.env.FRONTEND_URL;

  await loadLandingPage(page, url);

  await addRepository(page);

  await goToRepositoryDetailPage(page);

  await resetPage(page);

  log.info('Journey successful');
};

exports.handler = async () => journey();
